.TH "SDIF_18XX_43XX" 3 "Viernes, 14 de Septiembre de 2018" "Ejercicio 1 - TP 5" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SDIF_18XX_43XX \- CHIP: LPC18xx/43xx SD/SDIO driver
.SS "Estructuras de datos"

.in +1c
.ti -1c
.RI "struct \fBLPC_SDMMC_T\fP"
.br
.RI "\fISD/MMC & SDIO register block structure\&. \fP"
.ti -1c
.RI "struct \fBpSDMMC_DMA_T\fP"
.br
.RI "\fISDIO chained DMA descriptor\&. \fP"
.ti -1c
.RI "struct \fB_sdif_device\fP"
.br
.RI "\fISDIO device type\&. \fP"
.in -1c
.SS "'defines'"

.in +1c
.ti -1c
.RI "#define \fBMCI_DMADES0_OWN\fP   (1UL << 31)"
.br
.RI "\fISDIO DMA descriptor control (des0) register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_DMADES0_CES\fP   (1 << 30)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES0_ER\fP   (1 << 5)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES0_CH\fP   (1 << 4)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES0_FS\fP   (1 << 3)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES0_LD\fP   (1 << 2)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES0_DIC\fP   (1 << 1)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES1_BS1\fP(x)   (x)"
.br
.RI "\fISDIO DMA descriptor size (des1) register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_DMADES1_BS2\fP(x)   ((x) << 13)"
.br
.ti -1c
.RI "#define \fBMCI_DMADES1_MAXTR\fP   4096"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_USE_INT_DMAC\fP   (1 << 25)"
.br
.RI "\fISDIO control register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CTRL_CARDV_MASK\fP   (0x7 << 16)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_CEATA_INT_EN\fP   (1 << 11)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_SEND_AS_CCSD\fP   (1 << 10)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_SEND_CCSD\fP   (1 << 9)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_ABRT_READ_DATA\fP   (1 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_SEND_IRQ_RESP\fP   (1 << 7)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_READ_WAIT\fP   (1 << 6)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_INT_ENABLE\fP   (1 << 4)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_DMA_RESET\fP   (1 << 2)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_FIFO_RESET\fP   (1 << 1)"
.br
.ti -1c
.RI "#define \fBMCI_CTRL_RESET\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBMCI_POWER_ENABLE\fP   0x1"
.br
.RI "\fISDIO Power Enable register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CLOCK_DIVIDER\fP(dn,  d2)   ((d2) << ((dn) * 8))"
.br
.RI "\fISDIO Clock divider register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CLKSRC_CLKDIV0\fP   0"
.br
.RI "\fISDIO Clock source register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CLKSRC_CLKDIV1\fP   1"
.br
.ti -1c
.RI "#define \fBMCI_CLKSRC_CLKDIV2\fP   2"
.br
.ti -1c
.RI "#define \fBMCI_CLKSRC_CLKDIV3\fP   3"
.br
.ti -1c
.RI "#define \fBMCI_CLK_SOURCE\fP(clksrc)   (clksrc)"
.br
.ti -1c
.RI "#define \fBMCI_CLKEN_LOW_PWR\fP   (1 << 16)"
.br
.RI "\fISDIO Clock Enable register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CLKEN_ENABLE\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBMCI_TMOUT_DATA\fP(clks)   ((clks) << 8)"
.br
.RI "\fISDIO time-out register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_TMOUT_DATA_MSK\fP   0xFFFFFF00"
.br
.ti -1c
.RI "#define \fBMCI_TMOUT_RESP\fP(clks)   ((clks) & 0xFF)"
.br
.ti -1c
.RI "#define \fBMCI_TMOUT_RESP_MSK\fP   0xFF"
.br
.ti -1c
.RI "#define \fBMCI_CTYPE_8BIT\fP   (1 << 16)"
.br
.RI "\fISDIO card-type register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CTYPE_4BIT\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBMCI_INT_SDIO\fP   (1 << 16)"
.br
.RI "\fISDIO Interrupt status & mask register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_INT_EBE\fP   (1 << 15)"
.br
.ti -1c
.RI "#define \fBMCI_INT_ACD\fP   (1 << 14)"
.br
.ti -1c
.RI "#define \fBMCI_INT_SBE\fP   (1 << 13)"
.br
.ti -1c
.RI "#define \fBMCI_INT_HLE\fP   (1 << 12)"
.br
.ti -1c
.RI "#define \fBMCI_INT_FRUN\fP   (1 << 11)"
.br
.ti -1c
.RI "#define \fBMCI_INT_HTO\fP   (1 << 10)"
.br
.ti -1c
.RI "#define \fBMCI_INT_DTO\fP   (1 << 9)"
.br
.ti -1c
.RI "#define \fBMCI_INT_RTO\fP   (1 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_INT_DCRC\fP   (1 << 7)"
.br
.ti -1c
.RI "#define \fBMCI_INT_RCRC\fP   (1 << 6)"
.br
.ti -1c
.RI "#define \fBMCI_INT_RXDR\fP   (1 << 5)"
.br
.ti -1c
.RI "#define \fBMCI_INT_TXDR\fP   (1 << 4)"
.br
.ti -1c
.RI "#define \fBMCI_INT_DATA_OVER\fP   (1 << 3)"
.br
.ti -1c
.RI "#define \fBMCI_INT_CMD_DONE\fP   (1 << 2)"
.br
.ti -1c
.RI "#define \fBMCI_INT_RESP_ERR\fP   (1 << 1)"
.br
.ti -1c
.RI "#define \fBMCI_INT_CD\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_START\fP   (1UL << 31)"
.br
.RI "\fISDIO Command register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_CMD_VOLT_SWITCH\fP   (1 << 28)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_BOOT_MODE\fP   (1 << 27)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_DISABLE_BOOT\fP   (1 << 26)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_EXPECT_BOOT_ACK\fP   (1 << 25)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_ENABLE_BOOT\fP   (1 << 24)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_CCS_EXP\fP   (1 << 23)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_CEATA_RD\fP   (1 << 22)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_UPD_CLK\fP   (1 << 21)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_INIT\fP   (1 << 15)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_STOP\fP   (1 << 14)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_PRV_DAT_WAIT\fP   (1 << 13)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_SEND_STOP\fP   (1 << 12)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_STRM_MODE\fP   (1 << 11)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_DAT_WR\fP   (1 << 10)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_DAT_EXP\fP   (1 << 9)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_RESP_CRC\fP   (1 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_RESP_LONG\fP   (1 << 7)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_RESP_EXP\fP   (1 << 6)"
.br
.ti -1c
.RI "#define \fBMCI_CMD_INDX\fP(n)   ((n) & 0x1F)"
.br
.ti -1c
.RI "#define \fBMCI_STS_GET_FCNT\fP(x)   (((x) >> 17) & 0x1FF)"
.br
.RI "\fISDIO status register definess\&. \fP"
.ti -1c
.RI "#define \fBMCI_FIFOTH_TX_WM\fP(x)   ((x) & 0xFFF)"
.br
.RI "\fISDIO FIFO threshold defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_FIFOTH_RX_WM\fP(x)   (((x) & 0xFFF) << 16)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_1\fP   (0UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_4\fP   (1UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_8\fP   (2UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_16\fP   (3UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_32\fP   (4UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_64\fP   (5UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_128\fP   (6UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_FIFOTH_DMA_MTS_256\fP   (7UL << 28)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL1\fP   (0 << 8)"
.br
.RI "\fIBus mode register defines\&. \fP"
.ti -1c
.RI "#define \fBMCI_BMOD_PBL4\fP   (1 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL8\fP   (2 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL16\fP   (3 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL32\fP   (4 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL64\fP   (5 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL128\fP   (6 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_PBL256\fP   (7 << 8)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_DE\fP   (1 << 7)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_DSL\fP(len)   ((len) << 2)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_FB\fP   (1 << 1)"
.br
.ti -1c
.RI "#define \fBMCI_BMOD_SWR\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBSD_FIFO_SZ\fP   32"
.br
.RI "\fICommonly used definitions\&. \fP"
.ti -1c
.RI "#define \fBUS_TIMEOUT\fP   1000000"
.br
.RI "\fISetup options for the SDIO driver\&. \fP"
.ti -1c
.RI "#define \fBMS_ACQUIRE_DELAY\fP   (10)"
.br
.ti -1c
.RI "#define \fBINIT_OP_RETRIES\fP   50"
.br
.ti -1c
.RI "#define \fBSET_OP_RETRIES\fP   1000"
.br
.ti -1c
.RI "#define \fBSDIO_BUS_WIDTH\fP   4"
.br
.ti -1c
.RI "#define \fBSD_MMC_ENUM_CLOCK\fP   400000"
.br
.ti -1c
.RI "#define \fBMMC_MAX_CLOCK\fP   20000000"
.br
.ti -1c
.RI "#define \fBMMC_LOW_BUS_MAX_CLOCK\fP   26000000"
.br
.ti -1c
.RI "#define \fBMMC_HIGH_BUS_MAX_CLOCK\fP   52000000"
.br
.ti -1c
.RI "#define \fBSD_MAX_CLOCK\fP   25000000"
.br
.in -1c
.SS "'typedefs'"

.in +1c
.ti -1c
.RI "typedef uint32_t(* \fBMCI_IRQ_CB_FUNC_T\fP) (uint32_t)"
.br
.ti -1c
.RI "typedef int32_t(* \fBPSCHECK_FUNC_T\fP) (void)"
.br
.ti -1c
.RI "typedef void(* \fBPS_POWER_FUNC_T\fP) (int32_t enable)"
.br
.ti -1c
.RI "typedef struct \fB_sdif_device\fP \fBsdif_device\fP"
.br
.RI "\fISDIO device type\&. \fP"
.in -1c
.SS "Funciones"

.in +1c
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_SetBlkSize\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t bytes)"
.br
.RI "\fISet block size for the transfer\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_Reset\fP (\fBLPC_SDMMC_T\fP *pSDMMC, int32_t \fBreset\fP)"
.br
.RI "\fIReset card in slot\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP int32_t \fBChip_SDIF_CardNDetect\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIDetect if an SD card is inserted\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP int32_t \fBChip_SDIF_CardWpOn\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIDetect if write protect is enabled\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_PowerOff\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIDisable slot power\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_PowerOn\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIEnable slot power\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_SetCardType\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t ctype)"
.br
.RI "\fIFunction to set card type\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP uint32_t \fBChip_SDIF_GetIntStatus\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIReturns the raw SD interface interrupt status\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_ClrIntStatus\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t iVal)"
.br
.RI "\fIClears the raw SD interface interrupt status\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_SetIntMask\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t iVal)"
.br
.RI "\fISets the SD interface interrupt mask\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_SetBlkSizeByteCnt\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t blk_size)"
.br
.RI "\fISet block size and byte count for transfer\&. \fP"
.ti -1c
.RI "\fBSTATIC\fP \fBINLINE\fP void \fBChip_SDIF_SetByteCnt\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t bytes)"
.br
.RI "\fISet byte count for transfer\&. \fP"
.ti -1c
.RI "void \fBChip_SDIF_Init\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIInitializes the SD/MMC card controller\&. \fP"
.ti -1c
.RI "void \fBChip_SDIF_DeInit\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIShutdown the SD/MMC card controller\&. \fP"
.ti -1c
.RI "int32_t \fBChip_SDIF_SendCmd\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t cmd, uint32_t arg)"
.br
.RI "\fIFunction to send command to Card interface unit (CIU) \fP"
.ti -1c
.RI "void \fBChip_SDIF_GetResponse\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t *resp)"
.br
.RI "\fIRead the response from the last command\&. \fP"
.ti -1c
.RI "void \fBChip_SDIF_SetClock\fP (\fBLPC_SDMMC_T\fP *pSDMMC, uint32_t clk_rate, uint32_t speed)"
.br
.RI "\fISets the SD bus clock speed\&. \fP"
.ti -1c
.RI "void \fBChip_SDIF_SetClearIntFifo\fP (\fBLPC_SDMMC_T\fP *pSDMMC)"
.br
.RI "\fIFunction to clear interrupt & FIFOs\&. \fP"
.ti -1c
.RI "void \fBChip_SDIF_DmaSetup\fP (\fBLPC_SDMMC_T\fP *pSDMMC, \fBsdif_device\fP *psdif_dev, uint32_t addr, uint32_t size)"
.br
.RI "\fISetup DMA descriptors\&. \fP"
.in -1c
.SH "Descripción detallada"
.PP 

.SH "Documentación de los 'defines'"
.PP 
.SS "#define INIT_OP_RETRIES   50"
initial OP_COND retries 
.PP
Definición en la línea 264 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_DE   (1 << 7)"
Enable internal DMAC 
.PP
Definición en la línea 223 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_DSL(len)   ((len) << 2)"
Descriptor skip length 
.PP
Definición en la línea 224 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_FB   (1 << 1)"
Fixed bursts 
.PP
Definición en la línea 225 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL1   (0 << 8)"

.PP
Bus mode register defines\&. Burst length = 1 
.PP
Definición en la línea 215 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL128   (6 << 8)"
Burst length = 128 
.PP
Definición en la línea 221 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL16   (3 << 8)"
Burst length = 16 
.PP
Definición en la línea 218 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL256   (7 << 8)"
Burst length = 256 
.PP
Definición en la línea 222 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL32   (4 << 8)"
Burst length = 32 
.PP
Definición en la línea 219 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL4   (1 << 8)"
Burst length = 4 
.PP
Definición en la línea 216 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL64   (5 << 8)"
Burst length = 64 
.PP
Definición en la línea 220 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_PBL8   (2 << 8)"
Burst length = 8 
.PP
Definición en la línea 217 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_BMOD_SWR   (1 << 0)"
Software reset of internal registers 
.PP
Definición en la línea 226 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLK_SOURCE(clksrc)   (clksrc)"
Set cklock divider source 
.PP
Definición en la línea 134 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLKEN_ENABLE   (1 << 0)"
Enable slot clock 
.PP
Definición en la línea 139 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLKEN_LOW_PWR   (1 << 16)"

.PP
SDIO Clock Enable register defines\&. Enable clock idle for slot 
.PP
Definición en la línea 138 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLKSRC_CLKDIV0   0"

.PP
SDIO Clock source register defines\&. 
.PP
Definición en la línea 130 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLKSRC_CLKDIV1   1"

.PP
Definición en la línea 131 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLKSRC_CLKDIV2   2"

.PP
Definición en la línea 132 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLKSRC_CLKDIV3   3"

.PP
Definición en la línea 133 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CLOCK_DIVIDER(dn, d2)   ((d2) << ((dn) * 8))"

.PP
SDIO Clock divider register defines\&. Set cklock divider 
.PP
Definición en la línea 126 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_BOOT_MODE   (1 << 27)"
Boot mode 
.PP
Definición en la línea 177 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_CCS_EXP   (1 << 23)"
CCS expected 
.PP
Definición en la línea 181 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_CEATA_RD   (1 << 22)"
CE-ATA read in progress 
.PP
Definición en la línea 182 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_DAT_EXP   (1 << 9)"
Data expected 
.PP
Definición en la línea 190 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_DAT_WR   (1 << 10)"
Read(0)/Write(1) selection 
.PP
Definición en la línea 189 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_DISABLE_BOOT   (1 << 26)"
Disable boot 
.PP
Definición en la línea 178 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_ENABLE_BOOT   (1 << 24)"
Enable boot 
.PP
Definición en la línea 180 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_EXPECT_BOOT_ACK   (1 << 25)"
Expect boot ack 
.PP
Definición en la línea 179 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_INDX(n)   ((n) & 0x1F)"

.PP
Definición en la línea 194 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_INIT   (1 << 15)"
Send init sequence 
.PP
Definición en la línea 184 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_PRV_DAT_WAIT   (1 << 13)"
Wait before send 
.PP
Definición en la línea 186 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_RESP_CRC   (1 << 8)"
Check response CRC 
.PP
Definición en la línea 191 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_RESP_EXP   (1 << 6)"
Response expected 
.PP
Definición en la línea 193 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_RESP_LONG   (1 << 7)"
Response length 
.PP
Definición en la línea 192 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_SEND_STOP   (1 << 12)"
Send auto-stop 
.PP
Definición en la línea 187 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_START   (1UL << 31)"

.PP
SDIO Command register defines\&. Start command 
.PP
Definición en la línea 175 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_STOP   (1 << 14)"
Stop/abort command 
.PP
Definición en la línea 185 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_STRM_MODE   (1 << 11)"
Stream transfer mode 
.PP
Definición en la línea 188 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_UPD_CLK   (1 << 21)"
Update clock register only 
.PP
Definición en la línea 183 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CMD_VOLT_SWITCH   (1 << 28)"
Voltage switch bit 
.PP
Definición en la línea 176 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_ABRT_READ_DATA   (1 << 8)"
Abort read data 
.PP
Definición en la línea 112 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_CARDV_MASK   (0x7 << 16)"
SD_VOLT[2:0} pins output state mask 
.PP
Definición en la línea 108 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_CEATA_INT_EN   (1 << 11)"
Enable CE-ATA interrupts 
.PP
Definición en la línea 109 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_DMA_RESET   (1 << 2)"
Reset internal DMA 
.PP
Definición en la línea 116 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_FIFO_RESET   (1 << 1)"
Reset data FIFO pointers 
.PP
Definición en la línea 117 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_INT_ENABLE   (1 << 4)"
Global interrupt enable 
.PP
Definición en la línea 115 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_READ_WAIT   (1 << 6)"
Assert read-wait for SDIO 
.PP
Definición en la línea 114 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_RESET   (1 << 0)"
Reset controller 
.PP
Definición en la línea 118 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_SEND_AS_CCSD   (1 << 10)"
Send auto-stop 
.PP
Definición en la línea 110 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_SEND_CCSD   (1 << 9)"
Send CCSD 
.PP
Definición en la línea 111 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_SEND_IRQ_RESP   (1 << 7)"
Send auto-IRQ response 
.PP
Definición en la línea 113 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTRL_USE_INT_DMAC   (1 << 25)"

.PP
SDIO control register defines\&. Use internal DMA 
.PP
Definición en la línea 107 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTYPE_4BIT   (1 << 0)"
Enable 8-bit mode 
.PP
Definición en la línea 151 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_CTYPE_8BIT   (1 << 16)"

.PP
SDIO card-type register defines\&. Enable 4-bit mode 
.PP
Definición en la línea 150 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_CES   (1 << 30)"
Card Error Summary bit 
.PP
Definición en la línea 92 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_CH   (1 << 4)"
Second address chained bit 
.PP
Definición en la línea 94 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_DIC   (1 << 1)"
Disable interrupt on completion bit 
.PP
Definición en la línea 97 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_ER   (1 << 5)"
End of descriptopr ring bit 
.PP
Definición en la línea 93 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_FS   (1 << 3)"
First descriptor bit 
.PP
Definición en la línea 95 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_LD   (1 << 2)"
Last descriptor bit 
.PP
Definición en la línea 96 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES0_OWN   (1UL << 31)"

.PP
SDIO DMA descriptor control (des0) register defines\&. DMA owns descriptor bit 
.PP
Definición en la línea 91 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES1_BS1(x)   (x)"

.PP
SDIO DMA descriptor size (des1) register defines\&. Size of buffer 1 
.PP
Definición en la línea 101 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES1_BS2(x)   ((x) << 13)"
Size of buffer 2 
.PP
Definición en la línea 102 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_DMADES1_MAXTR   4096"
Max transfer size per buffer 
.PP
Definición en la línea 103 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_1   (0UL << 28)"

.PP
Definición en la línea 204 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_128   (6UL << 28)"

.PP
Definición en la línea 210 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_16   (3UL << 28)"

.PP
Definición en la línea 207 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_256   (7UL << 28)"

.PP
Definición en la línea 211 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_32   (4UL << 28)"

.PP
Definición en la línea 208 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_4   (1UL << 28)"

.PP
Definición en la línea 205 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_64   (5UL << 28)"

.PP
Definición en la línea 209 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_DMA_MTS_8   (2UL << 28)"

.PP
Definición en la línea 206 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_RX_WM(x)   (((x) & 0xFFF) << 16)"

.PP
Definición en la línea 203 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_FIFOTH_TX_WM(x)   ((x) & 0xFFF)"

.PP
SDIO FIFO threshold defines\&. 
.PP
Definición en la línea 202 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_ACD   (1 << 14)"
Auto command done 
.PP
Definición en la línea 157 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_CD   (1 << 0)"
Card detect 
.PP
Definición en la línea 171 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_CMD_DONE   (1 << 2)"
Command done 
.PP
Definición en la línea 169 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_DATA_OVER   (1 << 3)"
Data transfer over 
.PP
Definición en la línea 168 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_DCRC   (1 << 7)"
Data CRC error 
.PP
Definición en la línea 164 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_DTO   (1 << 9)"
Data timeout error 
.PP
Definición en la línea 162 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_EBE   (1 << 15)"
End-bit error 
.PP
Definición en la línea 156 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_FRUN   (1 << 11)"
FIFO overrun/underrun error 
.PP
Definición en la línea 160 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_HLE   (1 << 12)"
Hardware locked error 
.PP
Definición en la línea 159 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_HTO   (1 << 10)"
Host data starvation error 
.PP
Definición en la línea 161 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_RCRC   (1 << 6)"
Response CRC error 
.PP
Definición en la línea 165 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_RESP_ERR   (1 << 1)"
Command response error 
.PP
Definición en la línea 170 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_RTO   (1 << 8)"
Response timeout error 
.PP
Definición en la línea 163 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_RXDR   (1 << 5)"
RX data ready 
.PP
Definición en la línea 166 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_SBE   (1 << 13)"
Start bit error 
.PP
Definición en la línea 158 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_SDIO   (1 << 16)"

.PP
SDIO Interrupt status & mask register defines\&. SDIO interrupt 
.PP
Definición en la línea 155 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_INT_TXDR   (1 << 4)"
TX data needed 
.PP
Definición en la línea 167 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_POWER_ENABLE   0x1"

.PP
SDIO Power Enable register defines\&. Enable slot power signal (SD_POW) 
.PP
Definición en la línea 122 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_STS_GET_FCNT(x)   (((x) >> 17) & 0x1FF)"

.PP
SDIO status register definess\&. 
.PP
Definición en la línea 198 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_TMOUT_DATA(clks)   ((clks) << 8)"

.PP
SDIO time-out register defines\&. Data timeout clocks 
.PP
Definición en la línea 143 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_TMOUT_DATA_MSK   0xFFFFFF00"

.PP
Definición en la línea 144 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_TMOUT_RESP(clks)   ((clks) & 0xFF)"
Response timeout clocks 
.PP
Definición en la línea 145 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MCI_TMOUT_RESP_MSK   0xFF"

.PP
Definición en la línea 146 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MMC_HIGH_BUS_MAX_CLOCK   52000000"
Type 1 MMC card max clock rate 
.PP
Definición en la línea 270 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MMC_LOW_BUS_MAX_CLOCK   26000000"
Type 0 MMC card max clock rate 
.PP
Definición en la línea 269 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MMC_MAX_CLOCK   20000000"
Max MMC clock rate 
.PP
Definición en la línea 268 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define MS_ACQUIRE_DELAY   (10)"
inter-command acquire oper condition delay in msec 
.PP
Definición en la línea 263 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define SD_FIFO_SZ   32"

.PP
Commonly used definitions\&. Size of SDIO FIFOs (32-bit wide) 
.PP
Definición en la línea 230 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define SD_MAX_CLOCK   25000000"
Max SD clock rate 
.PP
Definición en la línea 271 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define SD_MMC_ENUM_CLOCK   400000"
Typical enumeration clock rate 
.PP
Definición en la línea 267 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define SDIO_BUS_WIDTH   4"
Max bus width supported 
.PP
Definición en la línea 266 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define SET_OP_RETRIES   1000"
set OP_COND retries 
.PP
Definición en la línea 265 del archivo sdif_18xx_43xx\&.h\&.
.SS "#define US_TIMEOUT   1000000"

.PP
Setup options for the SDIO driver\&. give 1 atleast 1 sec for the card to respond 
.PP
Definición en la línea 262 del archivo sdif_18xx_43xx\&.h\&.
.SH "Documentación de los 'typedefs'"
.PP 
.SS "typedef uint32_t(* MCI_IRQ_CB_FUNC_T) (uint32_t)"
Function prototype for SD interface IRQ callback 
.PP
Definición en la línea 233 del archivo sdif_18xx_43xx\&.h\&.
.SS "typedef void(* PS_POWER_FUNC_T) (int32_t enable)"
Function prototype for SD slot power enable or slot reset 
.PP
Definición en la línea 239 del archivo sdif_18xx_43xx\&.h\&.
.SS "typedef int32_t(* PSCHECK_FUNC_T) (void)"
Function prototype for SD detect and write protect status check 
.PP
Definición en la línea 236 del archivo sdif_18xx_43xx\&.h\&.
.SS "typedef struct \fB_sdif_device\fP  \fBsdif_device\fP"

.PP
SDIO device type\&. 
.SH "Documentación de las funciones"
.PP 
.SS "\fBSTATIC\fP \fBINLINE\fP int32_t Chip_SDIF_CardNDetect (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Detect if an SD card is inserted\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
Returns 0 if a card is detected, otherwise 1 
.RE
.PP
\fBNota:\fP
.RS 4
Detect if an SD card is inserted (uses SD_CD pin, returns 0 on card detect) 
.RE
.PP

.PP
Definición en la línea 309 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP int32_t Chip_SDIF_CardWpOn (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Detect if write protect is enabled\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
Returns 1 if card is write protected, otherwise 0 
.RE
.PP
\fBNota:\fP
.RS 4
Detect if write protect is enabled (uses SD_WP pin, returns 1 if card is write protected) 
.RE
.PP

.PP
Definición en la línea 321 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_ClrIntStatus (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t iVal)"

.PP
Clears the raw SD interface interrupt status\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIiVal\fP : Interrupts to be cleared, Or'ed values MCI_INT_* 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 375 del archivo sdif_18xx_43xx\&.h\&.
.SS "void Chip_SDIF_DeInit (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Shutdown the SD/MMC card controller\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 86 del archivo sdif_18xx_43xx\&.c\&.
.SS "void Chip_SDIF_DmaSetup (\fBLPC_SDMMC_T\fP * pSDMMC, \fBsdif_device\fP * psdif_dev, uint32_t addr, uint32_t size)"

.PP
Setup DMA descriptors\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIpsdif_dev\fP : SD interface device 
.br
\fIaddr\fP : Address of buffer (source or destination) 
.br
\fIsize\fP : size of buffer in bytes (64K max) 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 175 del archivo sdif_18xx_43xx\&.c\&.
.SS "\fBSTATIC\fP \fBINLINE\fP uint32_t Chip_SDIF_GetIntStatus (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Returns the raw SD interface interrupt status\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
Current pending interrupt status of Or'ed values MCI_INT_* 
.RE
.PP

.PP
Definición en la línea 364 del archivo sdif_18xx_43xx\&.h\&.
.SS "void Chip_SDIF_GetResponse (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t * resp)"

.PP
Read the response from the last command\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIresp\fP : Pointer to response array to fill 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 118 del archivo sdif_18xx_43xx\&.c\&.
.SS "void Chip_SDIF_Init (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Initializes the SD/MMC card controller\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 52 del archivo sdif_18xx_43xx\&.c\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_PowerOff (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Disable slot power\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP
\fBNota:\fP
.RS 4
Uses SD_POW pin, set to low\&. 
.RE
.PP

.PP
Definición en la línea 332 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_PowerOn (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Enable slot power\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP
\fBNota:\fP
.RS 4
Uses SD_POW pin, set to high\&. 
.RE
.PP

.PP
Definición en la línea 343 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_Reset (\fBLPC_SDMMC_T\fP * pSDMMC, int32_t reset)"

.PP
Reset card in slot\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIreset\fP : Sets SD_RST to passed state 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP
\fBNota:\fP
.RS 4
Reset card in slot, must manually de-assert reset after assertion (Uses SD_RST pin, set per reset parameter state) 
.RE
.PP

.PP
Definición en la línea 292 del archivo sdif_18xx_43xx\&.h\&.
.SS "int32_t Chip_SDIF_SendCmd (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t cmd, uint32_t arg)"

.PP
Function to send command to Card interface unit (CIU) 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIcmd\fP : Command with all flags set 
.br
\fIarg\fP : Argument for the command 
.RE
.PP
\fBDevuelve:\fP
.RS 4
TRUE on times-out, otherwise FALSE 
.RE
.PP

.PP
Definición en la línea 93 del archivo sdif_18xx_43xx\&.c\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_SetBlkSize (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t bytes)"

.PP
Set block size for the transfer\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIbytes\fP : block size in bytes 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 279 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_SetBlkSizeByteCnt (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t blk_size)"

.PP
Set block size and byte count for transfer\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIblk_size\fP block size and byte count in bytes 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 397 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_SetByteCnt (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t bytes)"

.PP
Set byte count for transfer\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIbytes\fP : block size and byte count in bytes 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 409 del archivo sdif_18xx_43xx\&.h\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_SetCardType (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t ctype)"

.PP
Function to set card type\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIctype\fP : card type 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 354 del archivo sdif_18xx_43xx\&.h\&.
.SS "void Chip_SDIF_SetClearIntFifo (\fBLPC_SDMMC_T\fP * pSDMMC)"

.PP
Function to clear interrupt & FIFOs\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 162 del archivo sdif_18xx_43xx\&.c\&.
.SS "void Chip_SDIF_SetClock (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t clk_rate, uint32_t speed)"

.PP
Sets the SD bus clock speed\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIclk_rate\fP : Input clock rate into the IP block 
.br
\fIspeed\fP : Desired clock speed to the card 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 128 del archivo sdif_18xx_43xx\&.c\&.
.SS "\fBSTATIC\fP \fBINLINE\fP void Chip_SDIF_SetIntMask (\fBLPC_SDMMC_T\fP * pSDMMC, uint32_t iVal)"

.PP
Sets the SD interface interrupt mask\&. 
.PP
\fBParámetros:\fP
.RS 4
\fIpSDMMC\fP : SDMMC peripheral selected 
.br
\fIiVal\fP : Interrupts to enable, Or'ed values MCI_INT_* 
.RE
.PP
\fBDevuelve:\fP
.RS 4
None 
.RE
.PP

.PP
Definición en la línea 386 del archivo sdif_18xx_43xx\&.h\&.
.SH "Autor"
.PP 
Generado automáticamente por Doxygen para Ejercicio 1 - TP 5 del código fuente\&.
