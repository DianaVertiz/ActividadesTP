.TH "CMSIS_Core_NVICFunctions" 3 "Viernes, 14 de Septiembre de 2018" "Ejercicio 1 - TP 5" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CMSIS_Core_NVICFunctions \- NVIC Functions
.PP
Functions that manage interrupts and exceptions via the NVIC\&.  

.SS "'defines'"

.in +1c
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)   (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)   ( ((((uint32_t)(IRQn) & 0x0F)\-8) >>    2)     )"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)   (   ((uint32_t)(IRQn)            >>    2)     )"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)   (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)   ( ((((uint32_t)(IRQn) & 0x0F)\-8) >>    2)     )"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)   (   ((uint32_t)(IRQn)            >>    2)     )"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)   (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)   ( ((((uint32_t)(IRQn) & 0x0F)\-8) >>    2)     )"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)   (   ((uint32_t)(IRQn)            >>    2)     )"
.br
.in -1c
.SS "Funciones"

.in +1c
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_EnableIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fIEnable External Interrupt\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_DisableIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fIDisable External Interrupt\&. \fP"
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_GetPendingIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fIGet Pending Interrupt\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SetPendingIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fISet Pending Interrupt\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_ClearPendingIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fIClear Pending Interrupt\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SetPriority\fP (\fBIRQn_Type\fP IRQn, uint32_t priority)"
.br
.RI "\fISet Interrupt Priority\&. \fP"
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_GetPriority\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fIGet Interrupt Priority\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SystemReset\fP (void)"
.br
.RI "\fISystem Reset\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SetPriorityGrouping\fP (uint32_t PriorityGroup)"
.br
.RI "\fISet Priority Grouping\&. \fP"
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_GetPriorityGrouping\fP (void)"
.br
.RI "\fIGet Priority Grouping\&. \fP"
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_GetActive\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "\fIGet Active Interrupt\&. \fP"
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_EncodePriority\fP (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)"
.br
.RI "\fIEncode Priority\&. \fP"
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_DecodePriority\fP (uint32_t Priority, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)"
.br
.RI "\fIDecode Priority\&. \fP"
.in -1c
.SH "Descripción detallada"
.PP 
Functions that manage interrupts and exceptions via the NVIC\&. 


.SH "Documentación de los 'defines'"
.PP 
.SS "#define _BIT_SHIFT(IRQn)   (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )"

.PP
Definición en la línea 504 del archivo core_cm0\&.h\&.
.SS "#define _BIT_SHIFT(IRQn)   (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )"

.PP
Definición en la línea 615 del archivo core_cm0plus\&.h\&.
.SS "#define _BIT_SHIFT(IRQn)   (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )"

.PP
Definición en la línea 635 del archivo core_sc000\&.h\&.
.SS "#define _IP_IDX(IRQn)   (   ((uint32_t)(IRQn)            >>    2)     )"

.PP
Definición en la línea 506 del archivo core_cm0\&.h\&.
.SS "#define _IP_IDX(IRQn)   (   ((uint32_t)(IRQn)            >>    2)     )"

.PP
Definición en la línea 617 del archivo core_cm0plus\&.h\&.
.SS "#define _IP_IDX(IRQn)   (   ((uint32_t)(IRQn)            >>    2)     )"

.PP
Definición en la línea 637 del archivo core_sc000\&.h\&.
.SS "#define _SHP_IDX(IRQn)   ( ((((uint32_t)(IRQn) & 0x0F)\-8) >>    2)     )"

.PP
Definición en la línea 505 del archivo core_cm0\&.h\&.
.SS "#define _SHP_IDX(IRQn)   ( ((((uint32_t)(IRQn) & 0x0F)\-8) >>    2)     )"

.PP
Definición en la línea 616 del archivo core_cm0plus\&.h\&.
.SS "#define _SHP_IDX(IRQn)   ( ((((uint32_t)(IRQn) & 0x0F)\-8) >>    2)     )"

.PP
Definición en la línea 636 del archivo core_sc000\&.h\&.
.SH "Documentación de las funciones"
.PP 
.SS "__STATIC_INLINE void NVIC_ClearPendingIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Clear Pending Interrupt\&. The function clears the pending bit of an external interrupt\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP External interrupt number\&. Value cannot be negative\&. 
.RE
.PP

.PP
Definición en la línea 567 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t * pPreemptPriority, uint32_t * pSubPriority)"

.PP
Decode Priority\&. The function decodes an interrupt priority value with a given priority group to preemptive priority value and subpriority value\&. In case of a conflict between priority grouping and available priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set\&.
.PP
\fBParámetros:\fP
.RS 4
\fIPriority\fP Priority value, which can be retrieved with the function \fBNVIC_GetPriority()\fP\&. 
.br
\fIPriorityGroup\fP Used priority group\&. 
.br
\fIpPreemptPriority\fP Preemptive priority value (starting from 0)\&. 
.br
\fIpSubPriority\fP Subpriority value (starting from 0)\&. 
.RE
.PP

.PP
Definición en la línea 1475 del archivo core_cm3\&.h\&.
.SS "__STATIC_INLINE void NVIC_DisableIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Disable External Interrupt\&. The function disables a device-specific interrupt in the NVIC interrupt controller\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP External interrupt number\&. Value cannot be negative\&. 
.RE
.PP

.PP
Definición en la línea 527 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE void NVIC_EnableIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Enable External Interrupt\&. The function enables a device-specific interrupt in the NVIC interrupt controller\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP External interrupt number\&. Value cannot be negative\&. 
.RE
.PP

.PP
Definición en la línea 515 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)"

.PP
Encode Priority\&. The function encodes the priority for an interrupt with the given priority group, preemptive priority value, and subpriority value\&. In case of a conflict between priority grouping and available priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set\&.
.PP
\fBParámetros:\fP
.RS 4
\fIPriorityGroup\fP Used priority group\&. 
.br
\fIPreemptPriority\fP Preemptive priority value (starting from 0)\&. 
.br
\fISubPriority\fP Subpriority value (starting from 0)\&. 
.RE
.PP
\fBDevuelve:\fP
.RS 4
Encoded priority\&. Value can be used in the function \fBNVIC_SetPriority()\fP\&. 
.RE
.PP

.PP
Definición en la línea 1447 del archivo core_cm3\&.h\&.
.SS "__STATIC_INLINE uint32_t NVIC_GetActive (\fBIRQn_Type\fP IRQn)"

.PP
Get Active Interrupt\&. The function reads the active register in NVIC and returns the active bit\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP Interrupt number\&.
.RE
.PP
\fBDevuelve:\fP
.RS 4
0 Interrupt status is not active\&. 
.PP
1 Interrupt status is active\&. 
.RE
.PP

.PP
Definición en la línea 1390 del archivo core_cm3\&.h\&.
.SS "__STATIC_INLINE uint32_t NVIC_GetPendingIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Get Pending Interrupt\&. The function reads the pending register in the NVIC and returns the pending bit for the specified interrupt\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP Interrupt number\&.
.RE
.PP
\fBDevuelve:\fP
.RS 4
0 Interrupt status is not pending\&. 
.PP
1 Interrupt status is pending\&. 
.RE
.PP

.PP
Definición en la línea 543 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE uint32_t NVIC_GetPriority (\fBIRQn_Type\fP IRQn)"

.PP
Get Interrupt Priority\&. The function reads the priority of an interrupt\&. The interrupt number can be positive to specify an external (device specific) interrupt, or negative to specify an internal (core) interrupt\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP Interrupt number\&. 
.RE
.PP
\fBDevuelve:\fP
.RS 4
Interrupt Priority\&. Value is aligned automatically to the implemented priority bits of the microcontroller\&. 
.RE
.PP

.PP
Definición en la línea 604 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping (void)"

.PP
Get Priority Grouping\&. The function reads the priority grouping field from the NVIC Interrupt Controller\&.
.PP
\fBDevuelve:\fP
.RS 4
Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)\&. 
.RE
.PP

.PP
Definición en la línea 1311 del archivo core_cm3\&.h\&.
.SS "__STATIC_INLINE void NVIC_SetPendingIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Set Pending Interrupt\&. The function sets the pending bit of an external interrupt\&.
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP Interrupt number\&. Value cannot be negative\&. 
.RE
.PP

.PP
Definición en la línea 555 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE void NVIC_SetPriority (\fBIRQn_Type\fP IRQn, uint32_t priority)"

.PP
Set Interrupt Priority\&. The function sets the priority of an interrupt\&.
.PP
\fBNota:\fP
.RS 4
The priority cannot be set for every core interrupt\&.
.RE
.PP
\fBParámetros:\fP
.RS 4
\fIIRQn\fP Interrupt number\&. 
.br
\fIpriority\fP Priority to set\&. 
.RE
.PP

.PP
Definición en la línea 582 del archivo core_cm0\&.h\&.
.SS "__STATIC_INLINE void NVIC_SetPriorityGrouping (uint32_t PriorityGroup)"

.PP
Set Priority Grouping\&. The function sets the priority grouping field using the required unlock sequence\&. The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field\&. Only values from 0\&.\&.7 are used\&. In case of a conflict between priority grouping and available priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set\&.
.PP
\fBParámetros:\fP
.RS 4
\fIPriorityGroup\fP Priority grouping field\&. 
.RE
.PP

.PP
Definición en la línea 1291 del archivo core_cm3\&.h\&.
.SS "__STATIC_INLINE void NVIC_SystemReset (void)"

.PP
System Reset\&. The function initiates a system reset request to reset the MCU\&. 
.PP
Definición en la línea 618 del archivo core_cm0\&.h\&.
.SH "Autor"
.PP 
Generado automáticamente por Doxygen para Ejercicio 1 - TP 5 del código fuente\&.
